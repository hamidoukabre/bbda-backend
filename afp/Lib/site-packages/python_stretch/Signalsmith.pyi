from typing import Annotated, overload

from numpy.typing import ArrayLike


class Stretch:
    """Class for Stretch processor."""

    @overload
    def __init__(self) -> None:
        """Default constructor."""

    @overload
    def __init__(self, seed: int) -> None:
        """Constructor with seed for deterministic behavior."""

    def blockSamples(self) -> int:
        """Get the block size used in processing."""

    def intervalSamples(self) -> int:
        """Get the interval size for overlapping."""

    def inputLatency(self) -> int:
        """Get the input latency of the processor in samples."""

    def outputLatency(self) -> int:
        """Get the output latency of the processor in samples."""

    @property
    def sampleRate(self) -> float:
        """Sample rate of the processor in Hz."""

    @sampleRate.setter
    def sampleRate(self, arg: float, /) -> None: ...

    @property
    def timeFactor(self) -> float:
        """
        Time-stretching factor. A value >1 speeds up the signal, <1 slows it down.
        """

    @timeFactor.setter
    def timeFactor(self, arg: float, /) -> None: ...

    def reset(self) -> None:
        """Reset the processor to its initial state."""

    def preset(self, nChannels: int, sampleRate: float, cheaper: bool = False) -> None:
        """
        Configure the Stretch processor with a preset.

        Parameters:
        ----------
        - nChannels (int): Number of audio channels.
        - sampleRate (float): Sample rate in Hz.
        - cheaper (bool, optional): If True, uses a lower-quality but more efficient configuration (default: False).
        """

    def configure(self, nChannels: int, blockSamples: int, intervalSamples: int) -> None:
        """
        Manually configure the stretch processor.

        Parameters:
        ----------
        - nChannels (int): Number of audio channels.
        - blockSamples (int): Block size for processing.
        - intervalSamples (int): Interval size for overlapping.
        """

    def setTransposeFactor(self, multiplier: float, tonalityLimit: float = 0) -> None:
        """
        Set the transposition factor for pitch shifting.

        Parameters:
        ----------
        - multiplier (float): Pitch shift multiplier (e.g., 2.0 for an octave up).
        - tonalityLimit (float, optional): Restriction on tonal adjustments (default: 0).
        """

    def setTransposeSemitones(self, semitones: float, tonalityLimit: float = 0) -> None:
        """
        Set the pitch shift in semitones.

        Parameters:
        ----------
        - semitones (float): Number of semitones to shift (e.g., +12 for an octave up).
        - tonalityLimit (float, optional): Restriction on tonal adjustments (default: 0).
        """

    def setTimeFactor(self, timeFactor: float) -> None:
        """
        Set the time-stretching factor.

        Parameters:
        ----------
        - timeFactor (float): Factor by which time is stretched or compressed (e.g., 0.5 slows down by half, 2.0 doubles speed).
        """

    def process(self, audio_input: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None))]) -> Annotated[ArrayLike, dict(dtype='float32', shape=(None, None))]:
        """
        Process an input audio buffer and return the stretched or pitch-shifted output.

        Parameters:
        ----------
        - audio_input (numpy.ndarray): Input audio buffer to be processed.

        Returns:
        ----------
        - numpy.ndarray: Stretched or pitch-shifted output audio buffer.
        """
